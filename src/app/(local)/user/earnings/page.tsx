"use client";

import { useUser } from "@/context/UserContext";
import { baseApi } from "@/lib/baseApi";
import { useState } from "react";
import { toast } from "sonner";

export default function MyEarningsPage() {
	const { user, setUser } = useUser();
	const [withdrawAmount, setWithdrawAmount] = useState("");
	const [method, setMethod] = useState("bkash");
	const [receiverNumber, setReceiverNumber] = useState("");
	const [loading, setLoading] = useState(false);

	const MIN_BALANCE = 100;

	const handleWithdraw = async (e: React.FormEvent) => {
		e.preventDefault();
		const amount = parseFloat(withdrawAmount);

		if (isNaN(amount) || amount <= 0) {
			toast.error("рж╕ржарж┐ржХ ржкрж░рж┐ржорж╛ржг рж▓рж┐ржЦрзБржиред");
			return;
		}
		if (amount >  (user?.balance ?? 0) ) {
			toast.error("ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕рзЗрж░ ржЪрзЗрзЯрзЗ ржмрзЗрж╢рж┐ ржЯрж╛ржХрж╛ рждрзБрж▓рзЗ ржирзЗржУрзЯрж╛ ржпрж╛ржмрзЗ ржирж╛ред");
			return;
		}
		if (amount < MIN_BALANCE) {
			toast.error(`ржЙрждрзНрждрзЛрж▓ржирзЗрж░ ржЬржирзНржп ржирзНржпрзВржирждржо ${MIN_BALANCE} ржЯрж╛ржХрж╛ ржерж╛ржХрждрзЗ рж╣ржмрзЗред`);
			return;
		}

		if (!receiverNumber || receiverNumber.length < 11) {
			toast.error("рж╕ржарж┐ржХ ржирж╛ржорзНржмрж╛рж░ рж▓рж┐ржЦрзБржиред");
			return;
		}

		setLoading(true);

		try {
			const res = await baseApi(`/withdraw/request`, {
				method: "POST",
				body: { amount, method, number: receiverNumber },
			});

			if (res.success) {
				setUser((prev: any) => ({
					...prev,
					balance: res.newBalance,
				}));
				setWithdrawAmount("");
				setReceiverNumber("");
				setMethod("bkash");
				toast.success(`${amount} ржЯрж╛ржХрж╛ ржЙрждрзНрждрзЛрж▓ржирзЗрж░ ржЕржирзБрж░рзЛржз рж╕ржлрж▓ рж╣рзЯрзЗржЫрзЗред`);
			} else {
				toast.error("ржЙрждрзНрждрзЛрж▓ржирзЗрж░ ржЕржирзБрж░рзЛржз ржмрзНржпрж░рзНрже рж╣рзЯрзЗржЫрзЗред");
			}
		} catch (error) {
			console.log("ЁЯЪА ~ handleWithdraw ~ error:", error);
			toast.error("ржЙрждрзНрждрзЛрж▓ржирзЗрж░ рж╕ржорзЯ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗред ржкрж░рзЗ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред");
		} finally {
			setLoading(false);
		}
	};

	return (
		<main className="max-w-md mx-auto p-6 bg-white rounded-md shadow-md mt-10">
			<h1 className="text-3xl font-bold mb-6 text-center text-indigo-700">
				ЁЯТ╡ ржЖржорж╛рж░ ржЖрзЯ
			</h1>

			<div className="mb-8 text-center">
				<p className="text-lg text-gray-600 mb-2">ржЖржкржирж╛рж░ ржорзЛржЯ ржмрзНржпрж╛рж▓рзЗржирзНрж╕:</p>
				<p className="text-4xl font-extrabold text-green-600">
					{ (user?.balance ?? 0) } ржЯрж╛ржХрж╛
				</p>
			</div>

			{ (user?.balance ?? 0)  < MIN_BALANCE && (
				<div className="text-center text-red-500 font-medium mb-4">
					ржЙрждрзНрждрзЛрж▓ржирзЗрж░ ржЬржирзНржп ржХржоржкржХрзНрж╖рзЗ {MIN_BALANCE} ржЯрж╛ржХрж╛ ржерж╛ржХрж╛ ржкрзНрж░рзЯрзЛржЬржиред
				</div>
			)}

			<form onSubmit={handleWithdraw} className="space-y-4">
				{/* Amount */}
				<div>
					<label htmlFor="withdraw" className="block text-gray-700 font-medium">
						ржЙрждрзНрждрзЛрж▓ржирзЗрж░ ржкрж░рж┐ржорж╛ржг
					</label>
					<input
						type="number"
						id="withdraw"
						className="w-full border border-gray-300 rounded-md px-4 py-2"
						placeholder="ржЯрж╛ржХрж╛рж░ ржкрж░рж┐ржорж╛ржг рж▓рж┐ржЦрзБржи"
						min={1}
						step="any"
						value={withdrawAmount}
						onChange={e => setWithdrawAmount(e.target.value)}
						disabled={loading ||  (user?.balance ?? 0)  < MIN_BALANCE}
						required
					/>
				</div>

				{/* Method */}
				<div>
					<label className="block text-gray-700 font-medium mb-1">
						ржкрзЗржорзЗржирзНржЯ ржорж╛ржзрзНржпржо ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи
					</label>
					<select
						className="w-full border border-gray-300 rounded-md px-4 py-2"
						value={method}
						onChange={e => setMethod(e.target.value)}
						disabled={loading}
						required>
						<option value="bkash">ЁЯУ▒ ржмрж┐ржХрж╛рж╢</option>
						<option value="nagad">ЁЯТ│ ржиржЧржж</option>
						<option value="rocket">ЁЯЪА рж░ржХрзЗржЯ</option>
					</select>
				</div>

				{/* Number */}
				<div>
					<label htmlFor="receiver" className="block text-gray-700 font-medium">
						{method === "bkash"
							? "ржмрж┐ржХрж╛рж╢ ржирж╛ржорзНржмрж╛рж░ рж▓рж┐ржЦрзБржи"
							: method === "nagad"
							? "ржиржЧржж ржирж╛ржорзНржмрж╛рж░ рж▓рж┐ржЦрзБржи"
							: "рж░ржХрзЗржЯ ржирж╛ржорзНржмрж╛рж░ рж▓рж┐ржЦрзБржи"}
					</label>
					<input
						type="tel"
						id="receiver"
						className="w-full border border-gray-300 rounded-md px-4 py-2"
						placeholder="01XXXXXXXXX"
						value={receiverNumber}
						onChange={e => setReceiverNumber(e.target.value)}
						disabled={loading}
						required
					/>
				</div>

				{/* Submit */}
				<button
					type="submit"
					className="w-full bg-indigo-600 text-white py-2 rounded-md hover:bg-indigo-700 transition disabled:opacity-50"
					disabled={loading ||  (user?.balance ?? 0)  < MIN_BALANCE}>
					{loading ? "ржЕржирзБрж░рзЛржз ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ..." : "ржЙрждрзНрждрзЛрж▓ржирзЗрж░ ржЕржирзБрж░рзЛржз ржкрж╛ржарж╛ржи"}
				</button>
			</form>
		</main>
	);
}
